#include <iostream>
#include <vector>

using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int d) {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

bool isLeaf(Node* root) {
    return root && !root->left && !root->right;
}

void addLeftBoundary(Node* root, vector<int>& res) {
    Node* curr = root->left;
    while (curr) {
        if (!isLeaf(curr)) {
            res.push_back(curr->data);
        }
        if (curr->left) {
            curr = curr->left;
        } else {
            curr = curr->right;
        }
    }
}

void addRightBoundary(Node* root, vector<int>& res) {
    Node* curr = root->right;
    vector<int> temp;
    while (curr) {
        if (!isLeaf(curr)) {
            temp.push_back(curr->data);
        }
        if (curr->right) {
            curr = curr->right;
        } else {
            curr = curr->left;
        }
    }
    for (int i = temp.size() - 1; i >= 0; i--) {
        res.push_back(temp[i]);
    }
}

void addLeaves(Node* root, vector<int>& res) {
    if (!root) return;
    if (isLeaf(root)) {
        res.push_back(root->data);
        return;
    }
    if (root->left) addLeaves(root->left, res);
    if (root->right) addLeaves(root->right, res);
}

vector<int> print(Node* root) {
    vector<int> res;
    if (!root) return res;
    
    if (!isLeaf(root)) res.push_back(root->data);
    
    addLeftBoundary(root, res);
    addLeaves(root, res);
    addRightBoundary(root, res);
    
    return res;
}

Node* buildTree() {
    cout << "Enter data: ";
    int data;
    cin >> data;
    if (data == -1) return NULL;

    Node* root = new Node(data);
    cout << "Enter for left of data " << data << endl;
    root->left = buildTree();
    cout << "Enter for right of data " << data << endl;
    root->right = buildTree();
    return root;
}

int main() {
    Node* root = buildTree();
    
    vector<int> boundary = print(root);
    cout << "Boundary Traversal: ";
    for (int val : boundary) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
