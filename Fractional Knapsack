class Solution {
  public:
    // Function to get the maximum total value in the knapsack.
    struct CompareBySecond{
        bool operator()(pair<int, double>a, pair<int, double>b){
            return a.second < b.second;
        }
    };
    double fractionalKnapsack(vector<int>& val, vector<int>& wt, int capacity) {
        // Your code here
        int n = val.size();
        priority_queue<pair<int, double>, vector<pair<int, double>>, CompareBySecond>perUnitValue;
        for(int i=0; i<n; i++){
            perUnitValue.push({i, (double)val[i]/wt[i]});
        }
        double ans = 0;
        while(capacity>0 && !perUnitValue.empty()){
            int index = perUnitValue.top().first;
            double fraction = perUnitValue.top().second;
            perUnitValue.pop();
            
            if(wt[index]<=capacity){
                ans += val[index];
                capacity -= wt[index];
            }
            else {
                ans += fraction * capacity;
                capacity = 0;
            }
        }
        return ans;
    }
};
